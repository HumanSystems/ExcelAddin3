

microsoft excel is waiting for another application to complete an ole action



3: How to fix the “Excel is waiting for OLE” issue
Open the Excel sheet.
Go to the File menu.
Click on Options.
Go to the Advanced tab.
Scroll down to the General area and check “Ignore other applications that use Dynamic Data Exchange (DDE)”
Restart Excel.


                MessageBox.Show("For pauseIII - here is file name about to process: " + filename);




 Application ExcelObj = new Application();
    Workbook WB = ExcelObj.Workbooks.Open(fileName,
        0, true, 5, "", "", true, XlPlatform.xlWindows, "\t",
        false, false, 0, true, false, false);
    Sheets sheets = WB.Worksheets;
    Worksheet WS = (Worksheet)sheets.get_Item(1);
    Range excelRange = WS.UsedRange;

        ... (DO STUFF?)

        // Get rid of everything - close Excel
        while (Marshal.ReleaseComObject(WB) > 0) { }
        WB = null;
        while (Marshal.ReleaseComObject(sheets) > 0) { }
        sheets = null;
        while (Marshal.ReleaseComObject(WS) > 0) { }
        WS = null;
        while (Marshal.ReleaseComObject(excelRange) > 0) { }
        excelRange = null;
        GC();
        ExcelObj.Quit();
        while (Marshal.ReleaseComObject(ExcelObj) > 0) { }
        ExcelObj = null;
        GC();

    public static void GC()
    {
        System.GC.Collect();
        System.GC.WaitForPendingFinalizers();
        System.GC.Collect();
        System.GC.WaitForPendingFinalizers();
    }
	
	
	
----------------------------------------------------------------------




Probably downvoted because it doesn't answer the question! If Excel goes out to lunch, which it often does, releasing all your references to it is not going to kill it. You NEED the process id. – 

Yes, you do. Excel processes started through COM are not child processes of your process, they are children of svchost.exe. If Excel is performing a blocking operation such as QueryTable.Refresh(), and your process exits, excel.exe will not die. If you're doing those refreshes in threads or subprocesses, which you might need to terminate, you're doomed to accumulate zombie excel processes, UNLESS you can track their process id's and kill them


using Excel = Microsoft.Office.Interop.Excel;
using System.Runtime.InteropServices;
using System.Diagnostics;

class Sample
{
    [DllImport("user32.dll")]
    static extern int GetWindowThreadProcessId(int hWnd, out int lpdwProcessId);

    Process GetExcelProcess(Excel.Application excelApp)
    {
        int id;
        GetWindowThreadProcessId(excelApp.Hwnd, out id);
        return Process.GetProcessById(id);
    }
}























































